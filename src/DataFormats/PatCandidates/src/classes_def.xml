<lcgdict>
 <selection>

  <!-- ==========================================================================================================================
              PAT Dataformats: PatObjects
       ========================================================================================================================== -->
  <!-- PAT Base Templates -->
  <class name="pat::PATObject<reco::GsfElectron>" />
  <class name="pat::PATObject<reco::Muon>" />
  <class name="pat::PATObject<reco::BaseTau>" />
  <class name="pat::PATObject<reco::Photon>" />
  <class name="pat::PATObject<reco::Jet>" />
  <class name="pat::PATObject<reco::MET>" />
  <class name="pat::PATObject<reco::LeafCandidate>" />
  <class name="pat::PATObject<reco::CompositeCandidate>" />
  <class name="pat::PATObject<reco::PFCandidate>" />
  <class name="pat::PATObject<reco::RecoCandidate>" />
  <class name="pat::Lepton<reco::GsfElectron>" />
  <class name="pat::Lepton<reco::Muon>" />
  <class name="pat::Lepton<reco::BaseTau>" />

  <!-- PAT Objects, and embedded data  -->
  <class name="pat::Electron" />
  <class name="pat::Muon" />
  <class name="pat::Tau" />
     <class name="pat::tau::TauPFSpecific" />
     <class name="std::vector<pat::tau::TauPFSpecific>" />
     <class name="pat::tau::TauCaloSpecific" />
     <class name="std::vector<pat::tau::TauCaloSpecific>" />
  <class name="pat::Photon" />
  <class name="pat::Jet" />
  <class name="pat::MET" >
    <field name="uncorInfo_" transient="true"/>
    <field name="nCorrections_" transient="true"/>
    <field name="oldPt_" transient="true"/>
  </class>
  <class name="pat::MHT" />
  <class name="pat::Particle" />
  <class name="pat::CompositeCandidate" />
  <class name="pat::PFParticle" />
  <class name="pat::GenericParticle" />
  <class name="pat::Hemisphere" />

  <!-- PAT Object Collections -->
  <class name="std::vector<pat::Electron>" />
  <class name="std::vector<pat::Muon>" />
  <class name="std::vector<pat::Tau>" />
  <class name="std::vector<pat::Photon>" />
  <class name="std::vector<pat::Jet>" />
  <class name="std::vector<pat::MET>" />
  <class name="std::vector<pat::MHT>" />
  <class name="std::vector<pat::Particle>" />
  <class name="std::vector<pat::CompositeCandidate>" />
  <class name="std::vector<pat::PFParticle>" />
  <class name="std::vector<pat::GenericParticle>" />
  <class name="std::vector<pat::Hemisphere>" />

  <!-- PAT Object Collection Iterators -->
  <class name="std::vector<pat::Electron>::const_iterator" />
  <class name="std::vector<pat::Muon>::const_iterator" />
  <class name="std::vector<pat::Tau>::const_iterator" />
  <class name="std::vector<pat::Photon>::const_iterator" />
  <class name="std::vector<pat::Jet>::const_iterator" />
  <class name="std::vector<pat::MET>::const_iterator" />
  <class name="std::vector<pat::MHT>::const_iterator" />
  <class name="std::vector<pat::Particle>::const_iterator" />
  <class name="std::vector<pat::CompositeCandidate>::const_iterator" />
  <class name="std::vector<pat::PFParticle>::const_iterator" />
  <class name="std::vector<pat::GenericParticle>::const_iterator" />
  <class name="std::vector<pat::Hemisphere>::const_iterator" />

  <!-- PAT Object Collection Wrappers -->
  <class name="edm::Wrapper<std::vector<pat::Electron> >" />
  <class name="edm::Wrapper<std::vector<pat::Muon> >" />
  <class name="edm::Wrapper<std::vector<pat::Tau> >" />
  <class name="edm::Wrapper<std::vector<pat::Photon> >" />
  <class name="edm::Wrapper<std::vector<pat::Jet> >" />
  <class name="edm::Wrapper<std::vector<pat::MET> >" />
  <class name="edm::Wrapper<std::vector<pat::MHT> >" />
  <class name="edm::Wrapper<std::vector<pat::Particle> >" />
  <class name="edm::Wrapper<std::vector<pat::CompositeCandidate> >" />
  <class name="edm::Wrapper<std::vector<pat::PFParticle> >" />
  <class name="edm::Wrapper<std::vector<pat::GenericParticle> >" />
  <class name="edm::Wrapper<std::vector<pat::Hemisphere> >" />

  <!-- PAT Object References -->
  <class name="pat::ElectronRef" />
  <class name="pat::MuonRef" />
  <class name="pat::TauRef" />
  <class name="pat::PhotonRef" />
  <class name="pat::JetRef" />
  <class name="pat::METRef" />
<!-- no ref needed for pat::MHT as it is filled from PAT objects -->
  <class name="pat::ParticleRef" />
  <class name="pat::CompositeCandidateRef" />
  <class name="pat::PFParticleRef" />
  <class name="pat::GenericParticleRef" />
  <class name="pat::HemisphereRef" />

  <!-- PAT Object Ref Vectors -->
  <class name="pat::ElectronRefVector" />
  <class name="pat::MuonRefVector" />
  <class name="pat::TauRefVector" />
  <class name="pat::PhotonRefVector" />
  <class name="pat::JetRefVector" />
  <class name="pat::METRefVector" />
  <class name="pat::ParticleRefVector" />
  <class name="pat::CompositeCandidateRefVector" />
  <class name="pat::PFParticleRefVector" />
  <class name="pat::GenericParticleRefVector" />
  <class name="pat::HemisphereRefVector" />

  <!-- PAT Object Ref Vector Wrappers -->
  <class name="edm::Wrapper<pat::ElectronRefVector>" />
  <class name="edm::Wrapper<pat::MuonRefVector>" />
  <class name="edm::Wrapper<pat::TauRefVector>" />
  <class name="edm::Wrapper<pat::PhotonRefVector>" />
  <class name="edm::Wrapper<pat::JetRefVector>" />
  <class name="edm::Wrapper<pat::METRefVector>" />
  <class name="edm::Wrapper<pat::ParticleRefVector>" />
  <class name="edm::Wrapper<pat::CompositeCandidateRefVector>" />
  <class name="edm::Wrapper<pat::PFParticleRefVector>" />
  <class name="edm::Wrapper<pat::GenericParticleRefVector>" />
  <class name="edm::Wrapper<pat::HemisphereRefVector>" />

  <!-- RefToBase<Candidate> from PATObjects -->
    <!-- With direct Holder -->
  <class name="edm::reftobase::Holder<reco::Candidate, pat::ElectronRef>" />
  <class name="edm::reftobase::Holder<reco::Candidate, pat::MuonRef>" />
  <class name="edm::reftobase::Holder<reco::Candidate, pat::TauRef>" />
  <class name="edm::reftobase::Holder<reco::Candidate, pat::PhotonRef>" />
  <class name="edm::reftobase::Holder<reco::Candidate, pat::JetRef>" />
  <class name="edm::reftobase::Holder<reco::Candidate, pat::METRef>" />
<!-- no reftobase needed for pat::MHT as it is filled from PAT objects -->
  <class name="edm::reftobase::Holder<reco::Candidate, pat::ParticleRef>" />
  <class name="edm::reftobase::Holder<reco::Candidate, pat::CompositeCandidateRef>" />
  <class name="edm::reftobase::Holder<reco::Candidate, pat::PFParticleRef>" />
  <class name="edm::reftobase::Holder<reco::Candidate, pat::GenericParticleRef>" />
    <!-- With indirect holder (RefHolder) -->
  <class name="edm::reftobase::RefHolder<pat::ElectronRef>" />
  <class name="edm::reftobase::RefHolder<pat::MuonRef>" />
  <class name="edm::reftobase::RefHolder<pat::TauRef>" />
  <class name="edm::reftobase::RefHolder<pat::PhotonRef>" />
  <class name="edm::reftobase::RefHolder<pat::JetRef>" />
  <class name="edm::reftobase::RefHolder<pat::METRef>" />
<!-- no reftobase needed for pat::MHT as it is filled from PAT objects -->
  <class name="edm::reftobase::RefHolder<pat::ParticleRef>" />
  <class name="edm::reftobase::RefHolder<pat::CompositeCandidateRef>" />
  <class name="edm::reftobase::RefHolder<pat::PFParticleRef>" />
  <class name="edm::reftobase::RefHolder<pat::GenericParticleRef>" />


 <!-- RefToBaseVector<Candidate> from PATObjetcs  -->
 <class name="edm::reftobase::RefVectorHolder<pat::CompositeCandidateRefVector>" />
 <class name="edm::reftobase::VectorHolder<reco::Candidate, pat::CompositeCandidateRefVector>" />

  <!-- ==========================================================================================================================
              PAT Dataformats beyond PatObjects
       ========================================================================================================================== -->
  <class name="std::vector<edm::Ptr<CaloTower> >" />
  <class name="std::vector<CaloTower>" />
  <class name="edm::Wrapper<std::vector<CaloTower> >" />

  <class name="std::pair<std::string,std::vector<float> >" />
  <class name="edm::Wrapper<std::pair<std::string,std::vector<float> > >" />
  <class name="std::vector<pat::JetCorrFactors::CorrectionFactor>" />
  <class name="edm::Wrapper<std::vector<pat::JetCorrFactors::CorrectionFactor> >" />
  <class name="pat::JetCorrFactors" />
  <class name="std::vector<pat::JetCorrFactors>" />
  <class name="edm::ValueMap<pat::JetCorrFactors>" />
  <class name="edm::Wrapper<edm::ValueMap<pat::JetCorrFactors> >" />

  <class name="StringMap" />
  <class name="edm::Wrapper<StringMap>" />

  <class name="pat::VertexAssociation" />
  <class name="std::vector<pat::VertexAssociation>" />
  <class name="edm::ValueMap<pat::VertexAssociation>" />
  <class name="edm::Wrapper<edm::ValueMap<pat::VertexAssociation> >" />

  <class name="pat::EventHypothesis" />
  <class name="std::vector<pat::EventHypothesis>" />
  <class name="edm::Wrapper<std::vector<pat::EventHypothesis> >" />

  <!-- This should go to DataFormats/HLTReco -->
  <enum name="trigger::TriggerObjectType" />
  <class name="std::vector<trigger::TriggerObjectType>" />
  <class name="std::vector<trigger::TriggerObjectType>::const_iterator" />

  <class name="pat::TriggerObject" />
  <class name="std::vector<pat::TriggerObject>" />
  <class name="std::vector<pat::TriggerObject>::const_iterator" />
  <class name="edm::Wrapper<std::vector<pat::TriggerObject> >" />
  <class name="pat::TriggerObjectRef" />
  <class name="std::pair<std::string, pat::TriggerObjectRef>" />
  <class name="std::map<std::string, pat::TriggerObjectRef>" />
  <class name="pat::TriggerObjectRefProd" />
  <class name="edm::Wrapper<pat::TriggerObjectRefProd>" />
  <class name="pat::TriggerObjectRefVector" />
  <class name="pat::TriggerObjectRefVectorIterator" />
  <class name="edm::Association<std::vector<pat::TriggerObject> >" />
  <class name="edm::reftobase::Holder<reco::Candidate,pat::TriggerObjectRef>" />
  <class name="edm::reftobase::RefHolder<pat::TriggerObjectRef>" />
  <class name="edm::Wrapper<edm::Association<std::vector<pat::TriggerObject> > >" />
  <class name="edm::RefProd<edm::Association<std::vector<pat::TriggerObject> > >" />
  <class name="std::pair<std::string, edm::RefProd<edm::Association<std::vector<pat::TriggerObject> > > >" />
  <class name="std::map<std::string, edm::RefProd<edm::Association<std::vector<pat::TriggerObject> > > >" />
  <class name="std::map<std::string, edm::RefProd<edm::Association<std::vector<pat::TriggerObject> > > >::const_iterator" />
  <class name="edm::Wrapper<std::map<std::string, edm::RefProd<edm::Association<std::vector<pat::TriggerObject> > > > >" />

  <class name="pat::TriggerObjectStandAlone" />
  <class name="std::vector<pat::TriggerObjectStandAlone>" />
  <class name="std::vector<pat::TriggerObjectStandAlone>::const_iterator" />
  <class name="edm::Wrapper<std::vector<pat::TriggerObjectStandAlone> >" />
  <class name="pat::TriggerObjectStandAloneRef" />
  <class name="pat::TriggerObjectStandAloneRefProd" />
  <class name="edm::Wrapper<pat::TriggerObjectStandAloneRefProd>" />
  <class name="pat::TriggerObjectStandAloneRefVector" />
  <class name="pat::TriggerObjectStandAloneRefVectorIterator" />
  <class name="edm::Association<std::vector<pat::TriggerObjectStandAlone> >" />
  <class name="edm::reftobase::Holder<reco::Candidate,pat::TriggerObjectStandAloneRef>" />
  <class name="edm::reftobase::RefHolder<pat::TriggerObjectStandAloneRef>" />
  <class name="edm::Wrapper<edm::Association<std::vector<pat::TriggerObjectStandAlone> > >" />

  <class name="pat::TriggerFilter" />
  <class name="std::vector<pat::TriggerFilter>" />
  <class name="std::vector<pat::TriggerFilter>::const_iterator" />
  <class name="edm::Wrapper<std::vector<pat::TriggerFilter> >" />
  <class name="pat::TriggerFilterRef" />
  <class name="pat::TriggerFilterRefProd" />
  <class name="edm::Wrapper<pat::TriggerFilterRefProd >" />
  <class name="pat::TriggerFilterRefVector" />
  <class name="pat::TriggerFilterRefVectorIterator" />

  <class name="pat::TriggerPath" />
  <class name="std::vector<pat::TriggerPath>" />
  <class name="std::vector<pat::TriggerPath>::const_iterator" />
  <class name="edm::Wrapper<std::vector<pat::TriggerPath> >" />
  <class name="pat::TriggerPathRef" />
  <class name="pat::TriggerPathRefProd" />
  <class name="edm::Wrapper<pat::TriggerPathRefProd >" />
  <class name="pat::TriggerPathRefVector" />
  <class name="pat::TriggerPathRefVectorIterator" />
  <class name="pat::L1Seed" />
  <class name="std::vector<pat::L1Seed>" />
  <class name="std::vector<pat::L1Seed>::const_iterator" />

  <class name="pat::TriggerAlgorithm" />
  <class name="std::vector<pat::TriggerAlgorithm>" />
  <class name="std::vector<pat::TriggerAlgorithm>::const_iterator" />
  <class name="edm::Wrapper<std::vector<pat::TriggerAlgorithm> >" />
  <class name="pat::TriggerAlgorithmRef" />
  <class name="pat::TriggerAlgorithmRefProd" />
  <class name="edm::Wrapper<pat::TriggerAlgorithmRefProd >" />
  <class name="pat::TriggerAlgorithmRefVector" />
  <class name="pat::TriggerAlgorithmRefVectorIterator" />

  <class name="pat::TriggerEvent" />
  <class name="edm::Wrapper<pat::TriggerEvent>" />

  <enum name ="pat::IsolationKeys" />
  <class name="std::pair<pat::IsolationKeys,reco::IsoDeposit>" />
  <class name="std::vector<std::pair<pat::IsolationKeys,reco::IsoDeposit> >" />

  <!-- UserData: Core -->
  <class name="pat::UserData" />
  <class name="std::vector<pat::UserData *>" />
  <class name="pat::UserDataCollection" />
  <!-- UserData: Standalone UserData in the event. Needed? -->
  <class name="edm::Wrapper<pat::UserDataCollection>" />
  <class name="edm::Ptr<pat::UserData>" />
  <class name="std::vector<edm::Ptr<pat::UserData> >" />
  <class name="edm::ValueMap<edm::Ptr<pat::UserData> >" />
  <class name="edm::Wrapper<edm::ValueMap<edm::Ptr<pat::UserData> > >" />
  <!-- UserData: a few holders -->
  <class pattern="pat::UserHolder<*>" />

  <class name="pat::LookupTableRecord" />
  <class name="std::vector<pat::LookupTableRecord>" />
  <class name="edm::ValueMap<pat::LookupTableRecord>" />
  <class name="edm::Wrapper<edm::ValueMap<pat::LookupTableRecord> >" />

  <class name="pat::CandKinResolution" >
     <field name="covariance_" transient="true"/>
  </class>
  <class name="std::vector<pat::CandKinResolution>" />
  <class name="pat::CandKinResolutionValueMap" />
  <class name="edm::Wrapper<pat::CandKinResolutionValueMap>" />

 </selection>
 <exclusion>
  <class name="edm::OwnVector<pat::UserData, edm::ClonePolicy<pat::UserData> >">
   <method name="sort" />
  </class>
 </exclusion>
</lcgdict>

